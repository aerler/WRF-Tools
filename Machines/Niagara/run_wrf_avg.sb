#!/bin/bash
# SLURM submission script for SciNet Niagara

## queue/SLURM settings
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=40
#SBATCH --time=1:00:00
# std and error output
#SBATCH --output=cycling_avg.%j.out
# send email if abort (nbae)
#SBATCH --mail-user="$EMAIL"
#SBATCH --mail-type=END,FAIL
# job name
#SBATCH -J cycling_avg

# some log info
echo
hostname
uname
echo
date
echo

## general settings
INIDIR="${SLURM_SUBMIT_DIR}"
SCRIPTDIR="${INIDIR}/scripts/" # default location of averaging script
AVGSCRIPT='run_wrf_avg.sb' # name of this script...
PYAVG='wrfout_average.py' # name of Python averaging script
DOMAINS='1234' # string of single-digit domain indices
## fix some legacy stuff...
# this should only necessary for old data from HPSS
ADDVAR=${ADDVAR:-"FALSE"}
ADDVARIABLE="addVariable.sh" # an NCKS script


## load machine setup
export RUNPYWPS=1 # to set Python path
export PYTHONVERSION=3 # wrfavg is now converted to Python 3
source "$SCRIPTDIR/setup_WPS.sh"


# return to original working directory
cd "${INIDIR}"

# influential enviromentvariables for averaging script
export PYAVG_THREADS=${PYAVG_THREADS:-"$SLURM_NTASKS"}
export PYAVG_DOMAINS=${PYAVG_DOMAINS:-"$DOMAINS"}
export PYAVG_FILETYPES=${PYAVG_FILETYPES:-''} # use default
export PYAVG_DAILY=${PYAVG_DAILY:-'TRUE'} # usually only monthly
export PYAVG_SMPLDIFF=${PYAVG_SMPLDIFF:-'FALSE'} # usually use centered diff
# options that would interfere with yearly updates
export PYAVG_OVERWRITE=${PYAVG_OVERWRITE:-'FALSE'}
export PYAVG_ADDNEW=${PYAVG_ADDNEW:-'FALSE'} 
export PYAVG_RECOVER=${PYAVG_RECOVER:-'FALSE'}
export PYAVG_DEBUG=${PYAVG_DEBUG:-'FALSE'} # add more debug output


# shuffle variables
echo
if [[ "${ADDVAR}" == 'ADDVAR' ]]; then
    # make sure, certain variables are there...
    for VAR in 'ACSNOW' 'SNOWNC' 'SR' 'T2MEAN' 'TSLB' 'PBLH'; do
      echo
      echo "Moving Variable '${VAR}' (in wrfout folder)"
        "${SCRIPTDIR}/${ADDVARIABLE}" "${VAR}" # launch NCKS script for all variables
      echo
    done
fi
echo

# launch averaging script (Python)
echo
if [[ -n "${PERIOD}" ]]; then
    time -p python "${SCRIPTDIR}/${PYAVG}" "${PERIOD}"
    ERR=$? # capture exit code      
else
    # launch actual averaging script
    time -p python "${SCRIPTDIR}/${PYAVG}"
    ERR=$? # capture exit code
fi
echo

# exit with exit code from python script
exit ${ERR}
